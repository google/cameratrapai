# Workflow for building and testing the Python code.
# https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python build

on:
  # pull_request:
  # push:
  workflow_dispatch:

jobs:

  try_early_exit:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]

    outputs:
      can_exit: ${{ steps.exit_check.outputs.can_exit }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Check early exit condition
      id: exit_check
      run: |
        num_files=$(git ls-files -- "*.py" | wc -l | xargs)
        can_exit=$([ "$num_files" == "0" ] && echo "true" || echo "false")
        echo "can_exit=$can_exit" >> "$GITHUB_OUTPUT"

  build_all:

    needs: [try_early_exit]
    if: needs.try_early_exit.outputs.can_exit == 'false'

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.9', '3.10', '3.11']

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }} on ${{ matrix.os }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install black[jupyter] isort pylint pyright pymarkdownlnt
        python -m venv .direnv
        source .direnv/bin/activate
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install -e .[github]
        python -m pip install pytest pytest-custom_exit_code
        echo "$PWD/.direnv/bin" >> "$GITHUB_PATH"
    - name: Check formatting with black
      if: always()
      run: |
        black . --check --diff
    - name: Check sorted imports with isort
      if: always()
      run: |
        isort . --check --diff
    - name: Lint with pylint
      if: always()
      run: |
        pylint . --recursive=yes
    - name: Check types with pyright
      if: always()
      run: |
        pyright
    - name: Run tests with pytest
      if: always()
      run: |
        pytest -vv --suppress-no-test-exit-code
    - name: Lint with pymarkdown
      if: always()
      run: |
        pymarkdown scan **/*.md
